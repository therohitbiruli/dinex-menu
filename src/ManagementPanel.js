import React from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { Menu, Plus, Edit3, Trash2, Eye, Download, QrCode } from './Icons'; // <-- CORRECT IMPORT

const ManagementPanel = (props) => {
    const {
        setCurrentView, liveOrders, handleSave, selectedRestaurant, setSelectedRestaurant, editingRestaurant, setEditingRestaurant,
        updateRestaurant, newCategoryInput, setNewCategoryInput, categories, setCategories, menuItems,
        setMenuItems, handleOnDragEnd, setEditingItem, deleteMenuItem,
        qrTableNumber, setQrTableNumber, isReadyForQR, customerMenuUrl, QRCodeComponent, downloadQRCode, viewingImage, setViewingImage
    } = props;

    return (
        <div className="min-h-screen bg-gray-50">
            <div className="bg-white shadow-sm border-b sticky top-0 z-10">
                <div className="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center">
                    <div className="flex items-center gap-4"><button onClick={() => setCurrentView("landing")} className="text-gray-600 hover:text-gray-800">‚Üê Back to Home</button><h1 className="text-2xl font-bold text-gray-800">Menu Management</h1></div>
                    <div className="flex items-center gap-4"><button onClick={() => setCurrentView("orders")} className="bg-red-500 text-white font-bold px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-red-600">Live Orders ({liveOrders.length})</button><button onClick={handleSave} className="bg-green-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-green-700"> Save Menu </button><button onClick={() => setCurrentView("menu")} className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700"><Eye className="w-4 h-4" /> Preview Menu</button></div>
                </div>
            </div>
            <div className="max-w-7xl mx-auto px-4 py-8 space-y-8">
                <div className="bg-white rounded-lg shadow-sm p-6"><div className="flex justify-between items-center mb-4"><h2 className="text-xl font-semibold">Restaurant Information</h2><button onClick={() => setEditingRestaurant(true)} className="bg-blue-600 text-white px-3 py-2 rounded-lg flex items-center gap-2 hover:bg-blue-700"><Edit3 className="w-4 h-4" /> Edit Info</button></div>{editingRestaurant ? (<div className="space-y-3"><input type="text" placeholder="Restaurant Name" value={selectedRestaurant?.name || ""} onChange={(e) => setSelectedRestaurant({...selectedRestaurant, name: e.target.value})} className="w-full px-3 py-2 border rounded-lg" /><textarea placeholder="Description" value={selectedRestaurant?.description || ""} onChange={(e) => setSelectedRestaurant({...selectedRestaurant, description: e.target.value})} className="w-full px-3 py-2 border rounded-lg" rows={3} /><div className="flex gap-2"><button onClick={() => updateRestaurant(selectedRestaurant)} className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">Save</button><button onClick={() => setEditingRestaurant(false)} className="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300">Cancel</button></div></div>) : (<div><p className="text-sm text-gray-600">Restaurant Name</p><p className="font-medium mb-3">{selectedRestaurant?.name || "Not set"}</p><p className="text-sm text-gray-600">Description</p><p className="font-medium">{selectedRestaurant?.description || "Not set"}</p></div>)}</div>
                <div className="bg-white rounded-lg shadow-sm p-6"><h2 className="text-xl font-semibold mb-4">Categories</h2><div className="flex gap-2 mb-4"><input value={newCategoryInput} onChange={(e) => setNewCategoryInput(e.target.value)} placeholder="Add new category" className="flex-1 px-3 py-2 border rounded-lg" onKeyPress={(e) => { if (e.key === 'Enter') { const trimmed = newCategoryInput.trim(); if (trimmed && !categories.includes(trimmed)) { setCategories(prev => [...prev, trimmed]); } setNewCategoryInput(""); } }} /><button onClick={() => { const trimmed = newCategoryInput.trim(); if (trimmed && !categories.includes(trimmed)) { setCategories(prev => [...prev, trimmed]); } setNewCategoryInput(""); }} className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">Add</button></div><DragDropContext onDragEnd={handleOnDragEnd}><Droppable droppableId="categories">{(provided) => (<div {...provided.droppableProps} ref={provided.innerRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">{categories.map((cat, index) => (<Draggable key={cat} draggableId={cat} index={index}>{(provided) => (<div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className="flex justify-between items-center bg-gray-50 px-3 py-2 rounded-lg shadow-sm cursor-grab"><span className="font-medium">{cat}</span><button onClick={() => { setCategories(prev => prev.filter(c => c !== cat)); setMenuItems(prev => prev.map(item => item.category === cat ? {...item, category: ""} : item)); }} className="text-red-600 hover:text-red-800 text-sm">Remove</button></div>)}</Draggable>))}{provided.placeholder}</div>)}</Droppable></DragDropContext>{categories.length === 0 && (<p className="text-gray-500 text-center py-4">No categories added yet</p>)}</div>
                <div className="bg-white rounded-lg shadow-sm p-6"><div className="flex justify-between items-center mb-4"><h2 className="text-xl font-semibold">Menu Items ({menuItems.length})</h2><button onClick={() => setEditingItem({ name: "", category: categories[0] || "", price: "", description: "", imageUrl: "", popular: false, isVeg: true, chefSpecial: false })} className="bg-green-600 text-white px-4 py-2 rounded-lg flex items-center gap-2 hover:bg-green-700"><Plus className="w-4 h-4" /> Add Item</button></div>{menuItems.length > 0 ? (<div className="space-y-3">{menuItems.map(item => (<div key={item.id} className="border rounded-lg p-4 hover:bg-gray-50"><div className="flex items-center justify-between"><div className="flex items-center gap-3">{item.imageUrl ? (<img src={item.imageUrl} alt={item.name} className="w-12 h-12 rounded-lg object-cover cursor-pointer" onClick={() => setViewingImage(item.imageUrl)}/>) : (<div className="w-12 h-12 rounded-lg bg-gray-100 flex items-center justify-center">üçΩÔ∏è</div>)}<div><div className="font-medium flex items-center gap-2">{item.name}{item.popular && <span className="text-xs bg-orange-100 text-orange-800 px-2 py-1 rounded">Popular</span>}{item.chefSpecial && <span className="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded">Chef's Special</span>}{item.isVeg ? <span className="text-green-600">üü¢</span> : <span className="text-red-600">üî¥</span>}</div><div className="text-sm text-gray-500">{item.description}</div><div className="text-sm text-gray-500">Category: {item.category || "Uncategorized"} | Price: ‚Çπ{item.price}</div></div></div><div className="flex gap-2"><button onClick={() => setEditingItem(item)} className="text-blue-600 hover:text-blue-800 p-1"><Edit3 className="w-4 h-4" /></button><button onClick={() => deleteMenuItem(item.id)} className="text-red-600 hover:text-red-800 p-1"><Trash2 className="w-4 h-4" /></button></div></div></div>))}</div>) : (<div className="text-center py-8 text-gray-500"><Menu className="w-12 h-12 mx-auto text-gray-300 mb-4" /><p className="text-lg font-medium mb-2">No menu items yet</p><p className="text-sm">Add your first menu item to get started</p></div>)}</div>
                <div className="bg-white rounded-lg shadow-sm p-6"><div className="text-center"><div className="flex items-center justify-center gap-2 mb-4"><QrCode className="w-6 h-6" /><h2 className="text-xl font-semibold">Customer QR Code</h2></div><p className="text-gray-600 mb-6">Generate a QR code for customers to scan and instantly access your digital menu. No app downloads required!</p><div className="flex flex-col items-center gap-6"><div className="w-full max-w-xs"><label htmlFor="table-number" className="block text-sm font-medium text-gray-700 mb-1 text-left">Table Number</label><input type="text" id="table-number" value={qrTableNumber} onChange={(e) => setQrTableNumber(e.target.value)} className="w-full px-3 py-2 border rounded-lg text-center font-bold text-lg" placeholder="e.g., 5"/></div><div className="bg-white p-4 rounded-lg border-2 border-dashed border-gray-300">{isReadyForQR ? (<QRCodeComponent value={customerMenuUrl} size={220} />) : (<div className="w-55 h-55 bg-gray-100 rounded-lg flex items-center justify-center p-8"><div className="text-center text-gray-500"><QrCode className="w-12 h-12 mx-auto mb-2" /><p className="text-sm">QR Code will appear here</p></div></div>)}</div>{!isReadyForQR ? (<div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 max-w-md"><h3 className="font-medium text-yellow-800 mb-2">Setup Required</h3><p className="text-sm text-yellow-700 mb-2">Complete these steps to generate your QR code:</p><ul className="text-sm text-yellow-700 space-y-1">{!selectedRestaurant?.name?.trim() && <li>‚Ä¢ Set restaurant name</li>}{categories.length === 0 && <li>‚Ä¢ Add at least one category</li>}{menuItems.length === 0 && <li>‚Ä¢ Add at least one menu item</li>}</ul></div>) : (<div className="text-center"><button onClick={() => { const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=220x220&data=${encodeURIComponent(customerMenuUrl)}`; const fileName = `${selectedRestaurant?.name || "menu"}-table-${qrTableNumber}-qr.png`; downloadQRCode(fileName, qrApiUrl); }} className="bg-green-600 text-white px-6 py-3 rounded-lg flex items-center gap-2 hover:bg-green-700 mx-auto"><Download className="w-5 h-5" /> Download QR Code</button><p className="text-xs text-gray-500 mt-3 max-w-md">Print this QR code and place it on tables. Customers can scan to view your menu instantly.</p></div>)}</div></div></div>
            </div>
        </div>
    );
};

export default ManagementPanel;